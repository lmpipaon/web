<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALBINAKO URTEGIA</title>
    <!-- Incluye la librería de Plotly -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        /* Estilos para el mensaje de carga */
        #loading-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 5px;
            font-family: Arial, sans-serif;
            z-index: 1000;
            display: none; /* Oculto inicialmente */
        }
    </style>
</head>
<body>
    <h1>ALBINAKO URTEGIA</h1>
    <div id="loading-message">Datuak kargatzen ari dira... Mesedez itxaron</div>
    <div id="grafica" style="width:100%;height:500px;"></div>

    <script>
        // Elementos del DOM
        const loadingMessage = document.getElementById('loading-message');
        const grafica = document.getElementById('grafica');

        // Tu API Key de ThingSpeak
        const apiKey = '79EBS0PGXTFMOJWH';
        // El ID del canal de ThingSpeak
        const channelID = 2272863;
        // URL de la API de ThingSpeak para obtener los datos (8000 resultados)
        const url = `https://api.thingspeak.com/channels/${channelID}/feeds.json?api_key=${apiKey}&results=8000`;

        // Función para convertir UTC a horario local de Madrid
        function convertirAFechaLocalMadrid(fechaUTC) {
            const fecha = new Date(fechaUTC);
            return fecha.toLocaleString('es-ES', { timeZone: 'Europe/Madrid' });
        }

        // Función para obtener los datos de ThingSpeak
        async function obtenerDatos() {
            try {
                loadingMessage.style.display = 'block'; // Mostrar mensaje
                grafica.style.opacity = '0.3'; // Atenuar gráfica
                
                const respuesta = await fetch(url);
                const datos = await respuesta.json();
                return datos.feeds;
            } catch (error) {
                console.error('Error al obtener los datos:', error);
                return [];
            } finally {
                loadingMessage.style.display = 'none'; // Ocultar mensaje
                grafica.style.opacity = '1'; // Restaurar opacidad
            }
        }

        async function dibujarGraficas() {
            try {
                const feeds = await obtenerDatos();

                // Convertir fechas de UTC a la hora local
                const fechas = feeds.map(feed => {
                    const fechaUTC = new Date(feed.created_at);
                    return fechaUTC.toLocaleString('es-ES', { timeZone: 'Europe/Madrid' });
                });

                // Filtrar etiquetas del eje X para evitar solapamiento
                const totalPuntos = fechas.length;
                const salto = Math.ceil(totalPuntos / 10); // Muestra 10 etiquetas aprox.
                const fechasReducidas = fechas.map((fecha, index) => (index % salto === 0 ? fecha : ''));

                // Datos para Field1
                const valoresField1 = feeds.map(feed => parseFloat(feed.field1));


                // Nivel del aliviadero de la presa
                const nivelAliviadero = 606.41; // Ajusta este valor según sea necesario

                // Crear trazos para cada campo
                const trazoField1 = {
                    x: fechas,
                    y: valoresField1,
                    type: 'scatter',
                    mode: 'lines',
                    name: '% BILTEGI 1',
                    line: { color: 'blue' }
                };

                // Layout de la gráfica
                const layout = {
                    title: '',
                    xaxis: {
                        tickmode: 'array',
                        tickvals: fechas.filter((_, index) => index % salto === 0), // Solo muestra algunas fechas
                        tickangle: -30 // Inclina los ticks para mejorar la lectura
                    },
                    yaxis: {
                        title: 'Valor',
                        range: [596.0, 607.0] // Ajustar el rango del eje y
                    },
                    shapes: [
                        {
                            type: 'line',
                            x0: fechas[0],
                            x1: fechas[fechas.length - 1],
                            y0: nivelAliviadero,
                            y1: nivelAliviadero,
                            line: {
                                color: 'red',
                                width: 2,
                                dash: 'dashdot'
                            }
                        }
                    ]
                };

                // Dibujar la gráfica
                Plotly.newPlot('grafica', [trazoField1], layout);

            } catch (error) {
                console.error('Error al dibujar las gráficas:', error);
                loadingMessage.textContent = 'Errorea datuak kargatzean. Saiatu berriro mesedez.';
                loadingMessage.style.display = 'block';
            }
        }

        // Llama a la función para dibujar las gráficas cuando la página se cargue
        window.onload = dibujarGraficas;
    </script>
</body>
</html>
